LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                            Freeware version                             |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : D4A9C299C0143EBACCC717EE9F6CCEF4AEFADDF75C8225CDD62BA54DF2BB4608
LOAD:0000000000000000 ; Input MD5    : 8858B14FCB0F759561E196C4444C05E3
LOAD:0000000000000000 ; Input CRC32  : B75DE0DB
LOAD:0000000000000000 ; Compiler     : GNU C++
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /Users/chrissheehan/Downloads/keygen.bin
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'keygen.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002D0↓o
LOAD:0000000000000000                                         ; LOAD:00000000000002E8↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset _start        ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 1A38h                ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 1Dh                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 1Ch                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0B70h                ; Size in file image
LOAD:00000000000000D8                 dq 0B70h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0D90h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100                 dq 200D90h              ; Physical address
LOAD:0000000000000108                 dq 280h                 ; Size in file image
LOAD:0000000000000110                 dq 288h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0DA0h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 200DA0h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 9FCh                 ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 9FCh                 ; Physical address
LOAD:00000000000001B0                 dq 44h                  ; Size in file image
LOAD:00000000000001B8                 dq 44h                  ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0D90h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 200D90h              ; Physical address
LOAD:0000000000000220                 dq 270h                 ; Size in file image
LOAD:0000000000000228                 dq 270h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 2Eh, 0F3h, 68h, 0E9h, 7Bh, 57h, 63h, 0A4h, 97h, 0E1h ; Desc
LOAD:000000000000028E                 db 68h, 0B8h, 0A5h, 3Ch, 0A6h, 0EFh, 0B5h, 4Ah, 0B8h, 0DFh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 1
LOAD:000000000000029C elf_gnu_hash_symbias dd 1
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 0
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 0
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 0
LOAD:00000000000002B4 elf_gnu_hash_chain dd 0
LOAD:00000000000002B8 ; ELF Symbol Table
LOAD:00000000000002B8                 Elf64_Sym <0>
LOAD:00000000000002D0                 Elf64_Sym <offset aItmDeregistert - offset byte_3D8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000002D0                            offset dword_0, 0>
LOAD:00000000000002E8                 Elf64_Sym <offset aPuts - offset byte_3D8, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:00000000000002E8                            0>
LOAD:0000000000000300                 Elf64_Sym <offset aStrlen - offset byte_3D8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000300                            offset dword_0, 0>
LOAD:0000000000000318                 Elf64_Sym <offset aStackChkFail - offset byte_3D8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000318                            offset dword_0, 0>
LOAD:0000000000000330                 Elf64_Sym <offset aPrintf - offset byte_3D8, 12h, 0, 0, \ ; "printf"
LOAD:0000000000000330                            offset dword_0, 0>
LOAD:0000000000000348                 Elf64_Sym <offset aLibcStartMain - offset byte_3D8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000348                            offset dword_0, 0>
LOAD:0000000000000360                 Elf64_Sym <offset aGmonStart - offset byte_3D8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000360                            offset dword_0, 0>
LOAD:0000000000000378                 Elf64_Sym <offset aIsoc99Scanf - offset byte_3D8, 12h, 0, 0, \ ; "__isoc99_scanf"
LOAD:0000000000000378                            offset dword_0, 0>
LOAD:0000000000000390                 Elf64_Sym <offset aExit - offset byte_3D8, 12h, 0, 0, offset dword_0, \ ; "exit"
LOAD:0000000000000390                            0>
LOAD:00000000000003A8                 Elf64_Sym <offset aItmRegistertmc - offset byte_3D8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000003A8                            offset dword_0, 0>
LOAD:00000000000003C0                 Elf64_Sym <offset aCxaFinalize - offset byte_3D8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000003C0                            offset dword_0, 0>
LOAD:00000000000003D8 ; ELF String Table
LOAD:00000000000003D8 byte_3D8        db 0                    ; DATA XREF: LOAD:00000000000002D0↑o
LOAD:00000000000003D8                                         ; LOAD:00000000000002E8↑o ...
LOAD:00000000000003D9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000004C0↓o
LOAD:00000000000003E3 aExit           db 'exit',0             ; DATA XREF: LOAD:0000000000000390↑o
LOAD:00000000000003E8 aIsoc99Scanf    db '__isoc99_scanf',0   ; DATA XREF: LOAD:0000000000000378↑o
LOAD:00000000000003F7 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000000002E8↑o
LOAD:00000000000003FC aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000318↑o
LOAD:000000000000040D aPrintf         db 'printf',0           ; DATA XREF: LOAD:0000000000000330↑o
LOAD:0000000000000414 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000300↑o
LOAD:000000000000041B aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000003C0↑o
LOAD:000000000000042A aLibcStartMain  db '__libc_start_main',0
LOAD:000000000000042A                                         ; DATA XREF: LOAD:0000000000000348↑o
LOAD:000000000000043C aGlibc27        db 'GLIBC_2.7',0        ; DATA XREF: LOAD:00000000000004D0↓o
LOAD:0000000000000446 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000000000004E0↓o
LOAD:0000000000000450 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000000004F0↓o
LOAD:000000000000045C aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:000000000000045C                                         ; DATA XREF: LOAD:00000000000002D0↑o
LOAD:0000000000000478 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000360↑o
LOAD:0000000000000487 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000487                                         ; DATA XREF: LOAD:00000000000003A8↑o
LOAD:00000000000004A1                 align 2
LOAD:00000000000004A2 ; ELF GNU Symbol Version Table
LOAD:00000000000004A2                 dw 0
LOAD:00000000000004A4                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:00000000000004A6                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:00000000000004A8                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:00000000000004AA                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:00000000000004AC                 dw 2                    ; printf@@GLIBC_2.2.5
LOAD:00000000000004AE                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:00000000000004B0                 dw 0                    ; local  symbol: __gmon_start__
LOAD:00000000000004B2                 dw 4                    ; __isoc99_scanf@@GLIBC_2.7
LOAD:00000000000004B4                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:00000000000004B6                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:00000000000004B8                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:00000000000004BA                 dw 0
LOAD:00000000000004BC                 dw 0
LOAD:00000000000004BE                 dw 0
LOAD:00000000000004C0 ; ELF GNU Symbol Version Requirements
LOAD:00000000000004C0                 Elf64_Verneed <1, 3, offset aLibcSo6 - offset byte_3D8, 10h, 0> ; "libc.so.6"
LOAD:00000000000004D0                 Elf64_Vernaux <0D696917h, 0, 4, offset aGlibc27 - offset byte_3D8, \ ; "GLIBC_2.7"
LOAD:00000000000004D0                                10h>
LOAD:00000000000004E0                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_3D8, \ ; "GLIBC_2.4"
LOAD:00000000000004E0                                10h>
LOAD:00000000000004F0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_3D8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000500 ; ELF RELA Relocation Table
LOAD:0000000000000500                 Elf64_Rela <200D90h, 8, 7F0h> ; R_X86_64_RELATIVE +7F0h
LOAD:0000000000000518                 dq 200D98h              ; r_offset ; R_X86_64_RELATIVE +7B0h
LOAD:0000000000000520                 dq 8                    ; r_info
LOAD:0000000000000528                 dq 7B0h                 ; r_addend
LOAD:0000000000000530                 Elf64_Rela <201008h, 8, 201008h> ; R_X86_64_RELATIVE +201008h
LOAD:0000000000000548                 Elf64_Rela <200FD8h, 100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000560                 Elf64_Rela <200FE0h, 600000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000578                 Elf64_Rela <200FE8h, 700000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000590                 Elf64_Rela <200FF0h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000005A8                 Elf64_Rela <200FF8h, 0B00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:00000000000005C0 ; ELF JMPREL Relocation Table
LOAD:00000000000005C0                 Elf64_Rela <200FA8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:00000000000005D8                 Elf64_Rela <200FB0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000005F0                 Elf64_Rela <200FB8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000608                 Elf64_Rela <200FC0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT printf
LOAD:0000000000000620                 Elf64_Rela <200FC8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __isoc99_scanf
LOAD:0000000000000638                 Elf64_Rela <200FD0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000000638 LOAD            ends
LOAD:0000000000000638
.init:0000000000000650 ; ===========================================================================
.init:0000000000000650
.init:0000000000000650 ; Segment type: Pure code
.init:0000000000000650 ; Segment permissions: Read/Execute
.init:0000000000000650 _init           segment dword public 'CODE' use64
.init:0000000000000650                 assume cs:_init
.init:0000000000000650                 ;org 650h
.init:0000000000000650                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000000650
.init:0000000000000650 ; =============== S U B R O U T I N E =======================================
.init:0000000000000650
.init:0000000000000650
.init:0000000000000650                 public _init_proc
.init:0000000000000650 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000000650                 sub     rsp, 8          ; _init
.init:0000000000000654                 mov     rax, cs:__gmon_start___ptr
.init:000000000000065B                 test    rax, rax
.init:000000000000065E                 jz      short loc_662
.init:0000000000000660                 call    rax ; __gmon_start__
.init:0000000000000662
.init:0000000000000662 loc_662:                                ; CODE XREF: _init_proc+E↑j
.init:0000000000000662                 add     rsp, 8
.init:0000000000000666                 retn
.init:0000000000000666 _init_proc      endp
.init:0000000000000666
.init:0000000000000666 _init           ends
.init:0000000000000666
LOAD:0000000000000667 ; ===========================================================================
LOAD:0000000000000667
LOAD:0000000000000667 ; Segment type: Pure code
LOAD:0000000000000667 ; Segment permissions: Read/Execute
LOAD:0000000000000667 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000667                 assume cs:LOAD
LOAD:0000000000000667                 ;org 667h
LOAD:0000000000000667                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000667                 align 10h
LOAD:0000000000000667 LOAD            ends
LOAD:0000000000000667
.plt:0000000000000670 ; ===========================================================================
.plt:0000000000000670
.plt:0000000000000670 ; Segment type: Pure code
.plt:0000000000000670 ; Segment permissions: Read/Execute
.plt:0000000000000670 _plt            segment para public 'CODE' use64
.plt:0000000000000670                 assume cs:_plt
.plt:0000000000000670                 ;org 670h
.plt:0000000000000670                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000000670
.plt:0000000000000670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000670
.plt:0000000000000670
.plt:0000000000000670 sub_670         proc near               ; CODE XREF: .plt:000000000000068B↓j
.plt:0000000000000670                                         ; .plt:000000000000069B↓j ...
.plt:0000000000000670 ; __unwind {
.plt:0000000000000670                 push    cs:qword_200F98
.plt:0000000000000676                 jmp     cs:qword_200FA0
.plt:0000000000000676 sub_670         endp
.plt:0000000000000676
.plt:0000000000000676 ; ---------------------------------------------------------------------------
.plt:000000000000067C                 align 20h
.plt:0000000000000680 ; [00000006 BYTES: COLLAPSED FUNCTION _puts]
.plt:0000000000000686 ; ---------------------------------------------------------------------------
.plt:0000000000000686                 push    0
.plt:000000000000068B                 jmp     sub_670
.plt:0000000000000690 ; [00000006 BYTES: COLLAPSED FUNCTION _strlen]
.plt:0000000000000696 ; ---------------------------------------------------------------------------
.plt:0000000000000696                 push    1
.plt:000000000000069B                 jmp     sub_670
.plt:00000000000006A0 ; [00000006 BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
.plt:00000000000006A6 ; ---------------------------------------------------------------------------
.plt:00000000000006A6                 push    2
.plt:00000000000006AB                 jmp     sub_670
.plt:00000000000006B0 ; [00000006 BYTES: COLLAPSED FUNCTION _printf]
.plt:00000000000006B6 ; ---------------------------------------------------------------------------
.plt:00000000000006B6                 push    3
.plt:00000000000006BB                 jmp     sub_670
.plt:00000000000006C0 ; [00000006 BYTES: COLLAPSED FUNCTION ___isoc99_scanf]
.plt:00000000000006C6 ; ---------------------------------------------------------------------------
.plt:00000000000006C6                 push    4
.plt:00000000000006CB                 jmp     sub_670
.plt:00000000000006D0 ; [00000006 BYTES: COLLAPSED FUNCTION _exit]
.plt:00000000000006D6 ; ---------------------------------------------------------------------------
.plt:00000000000006D6                 push    5
.plt:00000000000006DB                 jmp     sub_670
.plt:00000000000006DB ; } // starts at 670
.plt:00000000000006DB _plt            ends
.plt:00000000000006DB
.plt.got:00000000000006E0 ; ===========================================================================
.plt.got:00000000000006E0
.plt.got:00000000000006E0 ; Segment type: Pure code
.plt.got:00000000000006E0 ; Segment permissions: Read/Execute
.plt.got:00000000000006E0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000006E0                 assume cs:_plt_got
.plt.got:00000000000006E0                 ;org 6E0h
.plt.got:00000000000006E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000006E0 ; [00000006 BYTES: COLLAPSED FUNCTION __cxa_finalize]
.plt.got:00000000000006E6                 align 8
.plt.got:00000000000006E6 ; } // starts at 6E0
.plt.got:00000000000006E6 _plt_got        ends
.plt.got:00000000000006E6
LOAD:00000000000006E8 ; ===========================================================================
LOAD:00000000000006E8
LOAD:00000000000006E8 ; Segment type: Pure code
LOAD:00000000000006E8 ; Segment permissions: Read/Execute
LOAD:00000000000006E8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000006E8                 assume cs:LOAD
LOAD:00000000000006E8                 ;org 6E8h
LOAD:00000000000006E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000006E8                 align 10h
LOAD:00000000000006E8 LOAD            ends
LOAD:00000000000006E8
.text:00000000000006F0 ; ===========================================================================
.text:00000000000006F0
.text:00000000000006F0 ; Segment type: Pure code
.text:00000000000006F0 ; Segment permissions: Read/Execute
.text:00000000000006F0 _text           segment para public 'CODE' use64
.text:00000000000006F0                 assume cs:_text
.text:00000000000006F0                 ;org 6F0h
.text:00000000000006F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000006F0
.text:00000000000006F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000006F0
.text:00000000000006F0 ; Attributes: noreturn fuzzy-sp
.text:00000000000006F0
.text:00000000000006F0                 public _start
.text:00000000000006F0 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000006F0 ; __unwind {
.text:00000000000006F0                 xor     ebp, ebp
.text:00000000000006F2                 mov     r9, rdx         ; rtld_fini
.text:00000000000006F5                 pop     rsi             ; argc
.text:00000000000006F6                 mov     rdx, rsp        ; ubp_av
.text:00000000000006F9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000006FD                 push    rax
.text:00000000000006FE                 push    rsp             ; stack_end
.text:00000000000006FF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000000706                 lea     rcx, __libc_csu_init ; init
.text:000000000000070D                 lea     rdi, main       ; main
.text:0000000000000714                 call    cs:__libc_start_main_ptr
.text:000000000000071A                 hlt
.text:000000000000071A ; } // starts at 6F0
.text:000000000000071A _start          endp
.text:000000000000071A
.text:000000000000071A ; ---------------------------------------------------------------------------
.text:000000000000071B                 align 20h
.text:0000000000000720
.text:0000000000000720 ; =============== S U B R O U T I N E =======================================
.text:0000000000000720
.text:0000000000000720 ; Attributes: bp-based frame
.text:0000000000000720
.text:0000000000000720 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_7D3↓p
.text:0000000000000720                 lea     rdi, __bss_start
.text:0000000000000727                 push    rbp
.text:0000000000000728                 lea     rax, __bss_start
.text:000000000000072F                 cmp     rax, rdi
.text:0000000000000732                 mov     rbp, rsp
.text:0000000000000735                 jz      short loc_750
.text:0000000000000737                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000073E                 test    rax, rax
.text:0000000000000741                 jz      short loc_750
.text:0000000000000743                 pop     rbp
.text:0000000000000744                 jmp     rax
.text:0000000000000744 ; ---------------------------------------------------------------------------
.text:0000000000000746                 align 10h
.text:0000000000000750
.text:0000000000000750 loc_750:                                ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000000750                                         ; deregister_tm_clones+21↑j
.text:0000000000000750                 pop     rbp
.text:0000000000000751                 retn
.text:0000000000000751 deregister_tm_clones endp
.text:0000000000000751
.text:0000000000000751 ; ---------------------------------------------------------------------------
.text:0000000000000752                 align 20h
.text:0000000000000760
.text:0000000000000760 ; =============== S U B R O U T I N E =======================================
.text:0000000000000760
.text:0000000000000760 ; Attributes: bp-based frame
.text:0000000000000760
.text:0000000000000760 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000000760                 lea     rdi, __bss_start
.text:0000000000000767                 lea     rsi, __bss_start
.text:000000000000076E                 push    rbp
.text:000000000000076F                 sub     rsi, rdi
.text:0000000000000772                 mov     rbp, rsp
.text:0000000000000775                 sar     rsi, 3
.text:0000000000000779                 mov     rax, rsi
.text:000000000000077C                 shr     rax, 3Fh
.text:0000000000000780                 add     rsi, rax
.text:0000000000000783                 sar     rsi, 1
.text:0000000000000786                 jz      short loc_7A0
.text:0000000000000788                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000078F                 test    rax, rax
.text:0000000000000792                 jz      short loc_7A0
.text:0000000000000794                 pop     rbp
.text:0000000000000795                 jmp     rax
.text:0000000000000795 ; ---------------------------------------------------------------------------
.text:0000000000000797                 align 20h
.text:00000000000007A0
.text:00000000000007A0 loc_7A0:                                ; CODE XREF: register_tm_clones+26↑j
.text:00000000000007A0                                         ; register_tm_clones+32↑j
.text:00000000000007A0                 pop     rbp
.text:00000000000007A1                 retn
.text:00000000000007A1 register_tm_clones endp
.text:00000000000007A1
.text:00000000000007A1 ; ---------------------------------------------------------------------------
.text:00000000000007A2                 align 10h
.text:00000000000007B0
.text:00000000000007B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000007B0
.text:00000000000007B0
.text:00000000000007B0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000007B0                 cmp     cs:__bss_start, 0
.text:00000000000007B7                 jnz     short locret_7E8
.text:00000000000007B9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000007C1                 push    rbp
.text:00000000000007C2                 mov     rbp, rsp
.text:00000000000007C5                 jz      short loc_7D3
.text:00000000000007C7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000007CE                 call    __cxa_finalize
.text:00000000000007D3
.text:00000000000007D3 loc_7D3:                                ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000007D3                 call    deregister_tm_clones
.text:00000000000007D8                 mov     cs:__bss_start, 1
.text:00000000000007DF                 pop     rbp
.text:00000000000007E0                 retn
.text:00000000000007E0 ; ---------------------------------------------------------------------------
.text:00000000000007E1                 align 8
.text:00000000000007E8
.text:00000000000007E8 locret_7E8:                             ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000007E8                 rep retn
.text:00000000000007E8 __do_global_dtors_aux endp
.text:00000000000007E8
.text:00000000000007E8 ; ---------------------------------------------------------------------------
.text:00000000000007EA                 align 10h
.text:00000000000007F0
.text:00000000000007F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000007F0
.text:00000000000007F0 ; Attributes: bp-based frame
.text:00000000000007F0
.text:00000000000007F0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000007F0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000007F0                 push    rbp
.text:00000000000007F1                 mov     rbp, rsp
.text:00000000000007F4                 pop     rbp
.text:00000000000007F5                 jmp     register_tm_clones
.text:00000000000007F5 frame_dummy     endp
.text:00000000000007F5
.text:00000000000007FA
.text:00000000000007FA ; =============== S U B R O U T I N E =======================================
.text:00000000000007FA
.text:00000000000007FA ; Attributes: bp-based frame
.text:00000000000007FA
.text:00000000000007FA                 public check_key
.text:00000000000007FA check_key       proc near               ; CODE XREF: main+42↓p
.text:00000000000007FA
.text:00000000000007FA s               = qword ptr -28h
.text:00000000000007FA var_18          = dword ptr -18h
.text:00000000000007FA var_14          = dword ptr -14h
.text:00000000000007FA
.text:00000000000007FA ; __unwind {
.text:00000000000007FA                 push    rbp
.text:00000000000007FB                 mov     rbp, rsp
.text:00000000000007FE                 push    rbx
.text:00000000000007FF                 sub     rsp, 28h
.text:0000000000000803                 mov     [rbp+s], rdi
.text:0000000000000807                 mov     [rbp+var_18], 0
.text:000000000000080E                 mov     [rbp+var_14], 0
.text:0000000000000815                 mov     rax, [rbp+s]
.text:0000000000000819                 mov     rdi, rax        ; s
.text:000000000000081C                 call    _strlen
.text:0000000000000821                 cmp     rax, 7
.text:0000000000000825                 jbe     short loc_839
.text:0000000000000827                 mov     rax, [rbp+s]
.text:000000000000082B                 mov     rdi, rax        ; s
.text:000000000000082E                 call    _strlen
.text:0000000000000833                 cmp     rax, 0Ah
.text:0000000000000837                 jbe     short loc_854
.text:0000000000000839
.text:0000000000000839 loc_839:                                ; CODE XREF: check_key+2B↑j
.text:0000000000000839                 lea     rdi, format     ; "Nope <3"
.text:0000000000000840                 mov     eax, 0
.text:0000000000000845                 call    _printf
.text:000000000000084A                 mov     edi, 0          ; status
.text:000000000000084F                 call    _exit
.text:0000000000000854 ; ---------------------------------------------------------------------------
.text:0000000000000854
.text:0000000000000854 loc_854:                                ; CODE XREF: check_key+3D↑j
.text:0000000000000854                 mov     [rbp+var_18], 0
.text:000000000000085B                 jmp     short loc_877
.text:000000000000085D ; ---------------------------------------------------------------------------
.text:000000000000085D
.text:000000000000085D loc_85D:                                ; CODE XREF: check_key+92↓j
.text:000000000000085D                 mov     eax, [rbp+var_18]
.text:0000000000000860                 movsxd  rdx, eax
.text:0000000000000863                 mov     rax, [rbp+s]
.text:0000000000000867                 add     rax, rdx
.text:000000000000086A                 movzx   eax, byte ptr [rax]
.text:000000000000086D                 movsx   eax, al
.text:0000000000000870                 add     [rbp+var_14], eax
.text:0000000000000873                 add     [rbp+var_18], 1
.text:0000000000000877
.text:0000000000000877 loc_877:                                ; CODE XREF: check_key+61↑j
.text:0000000000000877                 mov     eax, [rbp+var_18]
.text:000000000000087A                 movsxd  rbx, eax
.text:000000000000087D                 mov     rax, [rbp+s]
.text:0000000000000881                 mov     rdi, rax        ; s
.text:0000000000000884                 call    _strlen
.text:0000000000000889                 cmp     rbx, rax
.text:000000000000088C                 jb      short loc_85D
.text:000000000000088E                 cmp     [rbp+var_14], 3E7h
.text:0000000000000895                 jg      short loc_8B2
.text:0000000000000897                 lea     rdi, format     ; "Nope <3"
.text:000000000000089E                 mov     eax, 0
.text:00000000000008A3                 call    _printf
.text:00000000000008A8                 mov     edi, 0          ; status
.text:00000000000008AD                 call    _exit
.text:00000000000008B2 ; ---------------------------------------------------------------------------
.text:00000000000008B2
.text:00000000000008B2 loc_8B2:                                ; CODE XREF: check_key+9B↑j
.text:00000000000008B2                 mov     eax, 1
.text:00000000000008B7                 add     rsp, 28h
.text:00000000000008BB                 pop     rbx
.text:00000000000008BC                 pop     rbp
.text:00000000000008BD                 retn
.text:00000000000008BD ; } // starts at 7FA
.text:00000000000008BD check_key       endp
.text:00000000000008BD
.text:00000000000008BE
.text:00000000000008BE ; =============== S U B R O U T I N E =======================================
.text:00000000000008BE
.text:00000000000008BE ; Attributes: bp-based frame
.text:00000000000008BE
.text:00000000000008BE ; int __fastcall main(int argc, const char **argv, const char **envp)
.text:00000000000008BE                 public main
.text:00000000000008BE main            proc near               ; DATA XREF: _start+1D↑o
.text:00000000000008BE
.text:00000000000008BE var_70          = byte ptr -70h
.text:00000000000008BE var_8           = qword ptr -8
.text:00000000000008BE
.text:00000000000008BE ; __unwind {
.text:00000000000008BE                 push    rbp
.text:00000000000008BF                 mov     rbp, rsp
.text:00000000000008C2                 sub     rsp, 70h
.text:00000000000008C6                 mov     rax, fs:28h
.text:00000000000008CF                 mov     [rbp+var_8], rax
.text:00000000000008D3                 xor     eax, eax
.text:00000000000008D5                 lea     rdi, s          ; "Give me a pass"
.text:00000000000008DC                 call    _puts
.text:00000000000008E1                 lea     rax, [rbp+var_70]
.text:00000000000008E5                 mov     rsi, rax
.text:00000000000008E8                 lea     rdi, aS         ; "%s"
.text:00000000000008EF                 mov     eax, 0
.text:00000000000008F4                 call    ___isoc99_scanf
.text:00000000000008F9                 lea     rax, [rbp+var_70]
.text:00000000000008FD                 mov     rdi, rax
.text:0000000000000900                 call    check_key
.text:0000000000000905                 test    eax, eax
.text:0000000000000907                 jz      short loc_91A
.text:0000000000000909                 lea     rdi, aYouMadeItNowKe ; "You made it, now keygen me!"
.text:0000000000000910                 mov     eax, 0
.text:0000000000000915                 call    _printf
.text:000000000000091A
.text:000000000000091A loc_91A:                                ; CODE XREF: main+49↑j
.text:000000000000091A                 mov     eax, 0
.text:000000000000091F                 mov     rdx, [rbp+var_8]
.text:0000000000000923                 xor     rdx, fs:28h
.text:000000000000092C                 jz      short locret_933
.text:000000000000092E                 call    ___stack_chk_fail
.text:0000000000000933 ; ---------------------------------------------------------------------------
.text:0000000000000933
.text:0000000000000933 locret_933:                             ; CODE XREF: main+6E↑j
.text:0000000000000933                 leave
.text:0000000000000934                 retn
.text:0000000000000934 ; } // starts at 8BE
.text:0000000000000934 main            endp
.text:0000000000000934
.text:0000000000000934 ; ---------------------------------------------------------------------------
.text:0000000000000935                 align 20h
.text:0000000000000940
.text:0000000000000940 ; =============== S U B R O U T I N E =======================================
.text:0000000000000940
.text:0000000000000940
.text:0000000000000940 ; void _libc_csu_init(void)
.text:0000000000000940                 public __libc_csu_init
.text:0000000000000940 __libc_csu_init proc near               ; DATA XREF: _start+16↑o
.text:0000000000000940 ; __unwind {
.text:0000000000000940                 push    r15
.text:0000000000000942                 push    r14
.text:0000000000000944                 mov     r15, rdx
.text:0000000000000947                 push    r13
.text:0000000000000949                 push    r12
.text:000000000000094B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000000952                 push    rbp
.text:0000000000000953                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000095A                 push    rbx
.text:000000000000095B                 mov     r13d, edi
.text:000000000000095E                 mov     r14, rsi
.text:0000000000000961                 sub     rbp, r12
.text:0000000000000964                 sub     rsp, 8
.text:0000000000000968                 sar     rbp, 3
.text:000000000000096C                 call    _init_proc
.text:0000000000000971                 test    rbp, rbp
.text:0000000000000974                 jz      short loc_996
.text:0000000000000976                 xor     ebx, ebx
.text:0000000000000978                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000000980
.text:0000000000000980 loc_980:                                ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000000980                 mov     rdx, r15
.text:0000000000000983                 mov     rsi, r14
.text:0000000000000986                 mov     edi, r13d
.text:0000000000000989                 call    ds:(__frame_dummy_init_array_entry - 200D90h)[r12+rbx*8]
.text:000000000000098D                 add     rbx, 1
.text:0000000000000991                 cmp     rbp, rbx
.text:0000000000000994                 jnz     short loc_980
.text:0000000000000996
.text:0000000000000996 loc_996:                                ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000000996                 add     rsp, 8
.text:000000000000099A                 pop     rbx
.text:000000000000099B                 pop     rbp
.text:000000000000099C                 pop     r12
.text:000000000000099E                 pop     r13
.text:00000000000009A0                 pop     r14
.text:00000000000009A2                 pop     r15
.text:00000000000009A4                 retn
.text:00000000000009A4 ; } // starts at 940
.text:00000000000009A4 __libc_csu_init endp
.text:00000000000009A4
.text:00000000000009A4 ; ---------------------------------------------------------------------------
.text:00000000000009A5                 align 10h
.text:00000000000009B0
.text:00000000000009B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000009B0
.text:00000000000009B0
.text:00000000000009B0 ; void _libc_csu_fini(void)
.text:00000000000009B0                 public __libc_csu_fini
.text:00000000000009B0 __libc_csu_fini proc near               ; DATA XREF: _start+F↑o
.text:00000000000009B0 ; __unwind {
.text:00000000000009B0                 rep retn
.text:00000000000009B0 ; } // starts at 9B0
.text:00000000000009B0 __libc_csu_fini endp
.text:00000000000009B0
.text:00000000000009B0 _text           ends
.text:00000000000009B0
LOAD:00000000000009B2 ; ===========================================================================
LOAD:00000000000009B2
LOAD:00000000000009B2 ; Segment type: Pure code
LOAD:00000000000009B2 ; Segment permissions: Read/Execute
LOAD:00000000000009B2 LOAD            segment byte public 'CODE' use64
LOAD:00000000000009B2                 assume cs:LOAD
LOAD:00000000000009B2                 ;org 9B2h
LOAD:00000000000009B2                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000009B2                 align 4
LOAD:00000000000009B2 LOAD            ends
LOAD:00000000000009B2
.fini:00000000000009B4 ; ===========================================================================
.fini:00000000000009B4
.fini:00000000000009B4 ; Segment type: Pure code
.fini:00000000000009B4 ; Segment permissions: Read/Execute
.fini:00000000000009B4 _fini           segment dword public 'CODE' use64
.fini:00000000000009B4                 assume cs:_fini
.fini:00000000000009B4                 ;org 9B4h
.fini:00000000000009B4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000009B4
.fini:00000000000009B4 ; =============== S U B R O U T I N E =======================================
.fini:00000000000009B4
.fini:00000000000009B4
.fini:00000000000009B4                 public _term_proc
.fini:00000000000009B4 _term_proc      proc near
.fini:00000000000009B4                 sub     rsp, 8          ; _fini
.fini:00000000000009B8                 add     rsp, 8
.fini:00000000000009BC                 retn
.fini:00000000000009BC _term_proc      endp
.fini:00000000000009BC
.fini:00000000000009BC _fini           ends
.fini:00000000000009BC
LOAD:00000000000009BD ; ===========================================================================
LOAD:00000000000009BD
LOAD:00000000000009BD ; Segment type: Pure code
LOAD:00000000000009BD ; Segment permissions: Read/Execute
LOAD:00000000000009BD LOAD            segment byte public 'CODE' use64
LOAD:00000000000009BD                 assume cs:LOAD
LOAD:00000000000009BD                 ;org 9BDh
LOAD:00000000000009BD                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000009BD                 align 20h
LOAD:00000000000009BD LOAD            ends
LOAD:00000000000009BD
.rodata:00000000000009C0 ; ===========================================================================
.rodata:00000000000009C0
.rodata:00000000000009C0 ; Segment type: Pure data
.rodata:00000000000009C0 ; Segment permissions: Read
.rodata:00000000000009C0 _rodata         segment dword public 'CONST' use64
.rodata:00000000000009C0                 assume cs:_rodata
.rodata:00000000000009C0                 ;org 9C0h
.rodata:00000000000009C0                 public _IO_stdin_used
.rodata:00000000000009C0 _IO_stdin_used  db    1
.rodata:00000000000009C1                 db    0
.rodata:00000000000009C2                 db    2
.rodata:00000000000009C3                 db    0
.rodata:00000000000009C4 ; const char format[]
.rodata:00000000000009C4 format          db 'Nope <3',0          ; DATA XREF: check_key:loc_839↑o
.rodata:00000000000009C4                                         ; check_key+9D↑o
.rodata:00000000000009CC ; const char s[]
.rodata:00000000000009CC s               db 'Give me a pass',0   ; DATA XREF: main+17↑o
.rodata:00000000000009DB aS              db '%s',0               ; DATA XREF: main+2A↑o
.rodata:00000000000009DE ; const char aYouMadeItNowKe[]
.rodata:00000000000009DE aYouMadeItNowKe db 'You made it, now keygen me!',0
.rodata:00000000000009DE                                         ; DATA XREF: main+4B↑o
.rodata:00000000000009DE _rodata         ends
.rodata:00000000000009DE
LOAD:00000000000009FA ; ===========================================================================
LOAD:00000000000009FA
LOAD:00000000000009FA ; Segment type: Pure code
LOAD:00000000000009FA ; Segment permissions: Read/Execute
LOAD:00000000000009FA LOAD            segment byte public 'CODE' use64
LOAD:00000000000009FA                 assume cs:LOAD
LOAD:00000000000009FA                 ;org 9FAh
LOAD:00000000000009FA                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000009FA                 align 4
LOAD:00000000000009FA LOAD            ends
LOAD:00000000000009FA
.eh_frame_hdr:00000000000009FC ; ===========================================================================
.eh_frame_hdr:00000000000009FC
.eh_frame_hdr:00000000000009FC ; Segment type: Pure data
.eh_frame_hdr:00000000000009FC ; Segment permissions: Read
.eh_frame_hdr:00000000000009FC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000009FC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000009FC                 ;org 9FCh
.eh_frame_hdr:00000000000009FC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000009FD                 db  1Bh
.eh_frame_hdr:00000000000009FE                 db    3
.eh_frame_hdr:00000000000009FF                 db  3Bh ; ;
.eh_frame_hdr:0000000000000A00                 db  40h ; @
.eh_frame_hdr:0000000000000A01                 db    0
.eh_frame_hdr:0000000000000A02                 db    0
.eh_frame_hdr:0000000000000A03                 db    0
.eh_frame_hdr:0000000000000A04                 db    7
.eh_frame_hdr:0000000000000A05                 db    0
.eh_frame_hdr:0000000000000A06                 db    0
.eh_frame_hdr:0000000000000A07                 db    0
.eh_frame_hdr:0000000000000A08                 db  74h ; t
.eh_frame_hdr:0000000000000A09                 db 0FCh
.eh_frame_hdr:0000000000000A0A                 db 0FFh
.eh_frame_hdr:0000000000000A0B                 db 0FFh
.eh_frame_hdr:0000000000000A0C                 db  8Ch
.eh_frame_hdr:0000000000000A0D                 db    0
.eh_frame_hdr:0000000000000A0E                 db    0
.eh_frame_hdr:0000000000000A0F                 db    0
.eh_frame_hdr:0000000000000A10                 db 0E4h
.eh_frame_hdr:0000000000000A11                 db 0FCh
.eh_frame_hdr:0000000000000A12                 db 0FFh
.eh_frame_hdr:0000000000000A13                 db 0FFh
.eh_frame_hdr:0000000000000A14                 db 0B4h
.eh_frame_hdr:0000000000000A15                 db    0
.eh_frame_hdr:0000000000000A16                 db    0
.eh_frame_hdr:0000000000000A17                 db    0
.eh_frame_hdr:0000000000000A18                 db 0F4h
.eh_frame_hdr:0000000000000A19                 db 0FCh
.eh_frame_hdr:0000000000000A1A                 db 0FFh
.eh_frame_hdr:0000000000000A1B                 db 0FFh
.eh_frame_hdr:0000000000000A1C                 db  5Ch ; \
.eh_frame_hdr:0000000000000A1D                 db    0
.eh_frame_hdr:0000000000000A1E                 db    0
.eh_frame_hdr:0000000000000A1F                 db    0
.eh_frame_hdr:0000000000000A20                 db 0FEh
.eh_frame_hdr:0000000000000A21                 db 0FDh
.eh_frame_hdr:0000000000000A22                 db 0FFh
.eh_frame_hdr:0000000000000A23                 db 0FFh
.eh_frame_hdr:0000000000000A24                 db 0CCh
.eh_frame_hdr:0000000000000A25                 db    0
.eh_frame_hdr:0000000000000A26                 db    0
.eh_frame_hdr:0000000000000A27                 db    0
.eh_frame_hdr:0000000000000A28                 db 0C2h
.eh_frame_hdr:0000000000000A29                 db 0FEh
.eh_frame_hdr:0000000000000A2A                 db 0FFh
.eh_frame_hdr:0000000000000A2B                 db 0FFh
.eh_frame_hdr:0000000000000A2C                 db 0F0h
.eh_frame_hdr:0000000000000A2D                 db    0
.eh_frame_hdr:0000000000000A2E                 db    0
.eh_frame_hdr:0000000000000A2F                 db    0
.eh_frame_hdr:0000000000000A30                 db  44h ; D
.eh_frame_hdr:0000000000000A31                 db 0FFh
.eh_frame_hdr:0000000000000A32                 db 0FFh
.eh_frame_hdr:0000000000000A33                 db 0FFh
.eh_frame_hdr:0000000000000A34                 db  14h
.eh_frame_hdr:0000000000000A35                 db    1
.eh_frame_hdr:0000000000000A36                 db    0
.eh_frame_hdr:0000000000000A37                 db    0
.eh_frame_hdr:0000000000000A38                 db 0B4h
.eh_frame_hdr:0000000000000A39                 db 0FFh
.eh_frame_hdr:0000000000000A3A                 db 0FFh
.eh_frame_hdr:0000000000000A3B                 db 0FFh
.eh_frame_hdr:0000000000000A3C                 db  5Ch ; \
.eh_frame_hdr:0000000000000A3D                 db    1
.eh_frame_hdr:0000000000000A3E                 db    0
.eh_frame_hdr:0000000000000A3F                 db    0
.eh_frame_hdr:0000000000000A3F _eh_frame_hdr   ends
.eh_frame_hdr:0000000000000A3F
.eh_frame:0000000000000A40 ; ===========================================================================
.eh_frame:0000000000000A40
.eh_frame:0000000000000A40 ; Segment type: Pure data
.eh_frame:0000000000000A40 ; Segment permissions: Read
.eh_frame:0000000000000A40 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000000A40                 assume cs:_eh_frame
.eh_frame:0000000000000A40                 ;org 0A40h
.eh_frame:0000000000000A40                 db  14h
.eh_frame:0000000000000A41                 db    0
.eh_frame:0000000000000A42                 db    0
.eh_frame:0000000000000A43                 db    0
.eh_frame:0000000000000A44                 db    0
.eh_frame:0000000000000A45                 db    0
.eh_frame:0000000000000A46                 db    0
.eh_frame:0000000000000A47                 db    0
.eh_frame:0000000000000A48                 db    1
.eh_frame:0000000000000A49                 db  7Ah ; z
.eh_frame:0000000000000A4A                 db  52h ; R
.eh_frame:0000000000000A4B                 db    0
.eh_frame:0000000000000A4C                 db    1
.eh_frame:0000000000000A4D                 db  78h ; x
.eh_frame:0000000000000A4E                 db  10h
.eh_frame:0000000000000A4F                 db    1
.eh_frame:0000000000000A50                 db  1Bh
.eh_frame:0000000000000A51                 db  0Ch
.eh_frame:0000000000000A52                 db    7
.eh_frame:0000000000000A53                 db    8
.eh_frame:0000000000000A54                 db  90h
.eh_frame:0000000000000A55                 db    1
.eh_frame:0000000000000A56                 db    7
.eh_frame:0000000000000A57                 db  10h
.eh_frame:0000000000000A58                 db  14h
.eh_frame:0000000000000A59                 db    0
.eh_frame:0000000000000A5A                 db    0
.eh_frame:0000000000000A5B                 db    0
.eh_frame:0000000000000A5C                 db  1Ch
.eh_frame:0000000000000A5D                 db    0
.eh_frame:0000000000000A5E                 db    0
.eh_frame:0000000000000A5F                 db    0
.eh_frame:0000000000000A60                 db  90h
.eh_frame:0000000000000A61                 db 0FCh
.eh_frame:0000000000000A62                 db 0FFh
.eh_frame:0000000000000A63                 db 0FFh
.eh_frame:0000000000000A64                 db  2Bh ; +
.eh_frame:0000000000000A65                 db    0
.eh_frame:0000000000000A66                 db    0
.eh_frame:0000000000000A67                 db    0
.eh_frame:0000000000000A68                 db    0
.eh_frame:0000000000000A69                 db    0
.eh_frame:0000000000000A6A                 db    0
.eh_frame:0000000000000A6B                 db    0
.eh_frame:0000000000000A6C                 db    0
.eh_frame:0000000000000A6D                 db    0
.eh_frame:0000000000000A6E                 db    0
.eh_frame:0000000000000A6F                 db    0
.eh_frame:0000000000000A70                 db  14h
.eh_frame:0000000000000A71                 db    0
.eh_frame:0000000000000A72                 db    0
.eh_frame:0000000000000A73                 db    0
.eh_frame:0000000000000A74                 db    0
.eh_frame:0000000000000A75                 db    0
.eh_frame:0000000000000A76                 db    0
.eh_frame:0000000000000A77                 db    0
.eh_frame:0000000000000A78                 db    1
.eh_frame:0000000000000A79                 db  7Ah ; z
.eh_frame:0000000000000A7A                 db  52h ; R
.eh_frame:0000000000000A7B                 db    0
.eh_frame:0000000000000A7C                 db    1
.eh_frame:0000000000000A7D                 db  78h ; x
.eh_frame:0000000000000A7E                 db  10h
.eh_frame:0000000000000A7F                 db    1
.eh_frame:0000000000000A80                 db  1Bh
.eh_frame:0000000000000A81                 db  0Ch
.eh_frame:0000000000000A82                 db    7
.eh_frame:0000000000000A83                 db    8
.eh_frame:0000000000000A84                 db  90h
.eh_frame:0000000000000A85                 db    1
.eh_frame:0000000000000A86                 db    0
.eh_frame:0000000000000A87                 db    0
.eh_frame:0000000000000A88                 db  24h ; $
.eh_frame:0000000000000A89                 db    0
.eh_frame:0000000000000A8A                 db    0
.eh_frame:0000000000000A8B                 db    0
.eh_frame:0000000000000A8C                 db  1Ch
.eh_frame:0000000000000A8D                 db    0
.eh_frame:0000000000000A8E                 db    0
.eh_frame:0000000000000A8F                 db    0
.eh_frame:0000000000000A90                 db 0E0h
.eh_frame:0000000000000A91                 db 0FBh
.eh_frame:0000000000000A92                 db 0FFh
.eh_frame:0000000000000A93                 db 0FFh
.eh_frame:0000000000000A94                 db  70h ; p
.eh_frame:0000000000000A95                 db    0
.eh_frame:0000000000000A96                 db    0
.eh_frame:0000000000000A97                 db    0
.eh_frame:0000000000000A98                 db    0
.eh_frame:0000000000000A99                 db  0Eh
.eh_frame:0000000000000A9A                 db  10h
.eh_frame:0000000000000A9B                 db  46h ; F
.eh_frame:0000000000000A9C                 db  0Eh
.eh_frame:0000000000000A9D                 db  18h
.eh_frame:0000000000000A9E                 db  4Ah ; J
.eh_frame:0000000000000A9F                 db  0Fh
.eh_frame:0000000000000AA0                 db  0Bh
.eh_frame:0000000000000AA1                 db  77h ; w
.eh_frame:0000000000000AA2                 db    8
.eh_frame:0000000000000AA3                 db  80h
.eh_frame:0000000000000AA4                 db    0
.eh_frame:0000000000000AA5                 db  3Fh ; ?
.eh_frame:0000000000000AA6                 db  1Ah
.eh_frame:0000000000000AA7                 db  3Bh ; ;
.eh_frame:0000000000000AA8                 db  2Ah ; *
.eh_frame:0000000000000AA9                 db  33h ; 3
.eh_frame:0000000000000AAA                 db  24h ; $
.eh_frame:0000000000000AAB                 db  22h ; "
.eh_frame:0000000000000AAC                 db    0
.eh_frame:0000000000000AAD                 db    0
.eh_frame:0000000000000AAE                 db    0
.eh_frame:0000000000000AAF                 db    0
.eh_frame:0000000000000AB0                 db  14h
.eh_frame:0000000000000AB1                 db    0
.eh_frame:0000000000000AB2                 db    0
.eh_frame:0000000000000AB3                 db    0
.eh_frame:0000000000000AB4                 db  44h ; D
.eh_frame:0000000000000AB5                 db    0
.eh_frame:0000000000000AB6                 db    0
.eh_frame:0000000000000AB7                 db    0
.eh_frame:0000000000000AB8                 db  28h ; (
.eh_frame:0000000000000AB9                 db 0FCh
.eh_frame:0000000000000ABA                 db 0FFh
.eh_frame:0000000000000ABB                 db 0FFh
.eh_frame:0000000000000ABC                 db    8
.eh_frame:0000000000000ABD                 db    0
.eh_frame:0000000000000ABE                 db    0
.eh_frame:0000000000000ABF                 db    0
.eh_frame:0000000000000AC0                 db    0
.eh_frame:0000000000000AC1                 db    0
.eh_frame:0000000000000AC2                 db    0
.eh_frame:0000000000000AC3                 db    0
.eh_frame:0000000000000AC4                 db    0
.eh_frame:0000000000000AC5                 db    0
.eh_frame:0000000000000AC6                 db    0
.eh_frame:0000000000000AC7                 db    0
.eh_frame:0000000000000AC8                 db  20h
.eh_frame:0000000000000AC9                 db    0
.eh_frame:0000000000000ACA                 db    0
.eh_frame:0000000000000ACB                 db    0
.eh_frame:0000000000000ACC                 db  5Ch ; \
.eh_frame:0000000000000ACD                 db    0
.eh_frame:0000000000000ACE                 db    0
.eh_frame:0000000000000ACF                 db    0
.eh_frame:0000000000000AD0                 db  2Ah ; *
.eh_frame:0000000000000AD1                 db 0FDh
.eh_frame:0000000000000AD2                 db 0FFh
.eh_frame:0000000000000AD3                 db 0FFh
.eh_frame:0000000000000AD4                 db 0C4h
.eh_frame:0000000000000AD5                 db    0
.eh_frame:0000000000000AD6                 db    0
.eh_frame:0000000000000AD7                 db    0
.eh_frame:0000000000000AD8                 db    0
.eh_frame:0000000000000AD9                 db  41h ; A
.eh_frame:0000000000000ADA                 db  0Eh
.eh_frame:0000000000000ADB                 db  10h
.eh_frame:0000000000000ADC                 db  86h
.eh_frame:0000000000000ADD                 db    2
.eh_frame:0000000000000ADE                 db  43h ; C
.eh_frame:0000000000000ADF                 db  0Dh
.eh_frame:0000000000000AE0                 db    6
.eh_frame:0000000000000AE1                 db  45h ; E
.eh_frame:0000000000000AE2                 db  83h
.eh_frame:0000000000000AE3                 db    3
.eh_frame:0000000000000AE4                 db    2
.eh_frame:0000000000000AE5                 db 0BAh
.eh_frame:0000000000000AE6                 db  0Ch
.eh_frame:0000000000000AE7                 db    7
.eh_frame:0000000000000AE8                 db    8
.eh_frame:0000000000000AE9                 db    0
.eh_frame:0000000000000AEA                 db    0
.eh_frame:0000000000000AEB                 db    0
.eh_frame:0000000000000AEC                 db  20h
.eh_frame:0000000000000AED                 db    0
.eh_frame:0000000000000AEE                 db    0
.eh_frame:0000000000000AEF                 db    0
.eh_frame:0000000000000AF0                 db  80h
.eh_frame:0000000000000AF1                 db    0
.eh_frame:0000000000000AF2                 db    0
.eh_frame:0000000000000AF3                 db    0
.eh_frame:0000000000000AF4                 db 0CAh
.eh_frame:0000000000000AF5                 db 0FDh
.eh_frame:0000000000000AF6                 db 0FFh
.eh_frame:0000000000000AF7                 db 0FFh
.eh_frame:0000000000000AF8                 db  77h ; w
.eh_frame:0000000000000AF9                 db    0
.eh_frame:0000000000000AFA                 db    0
.eh_frame:0000000000000AFB                 db    0
.eh_frame:0000000000000AFC                 db    0
.eh_frame:0000000000000AFD                 db  41h ; A
.eh_frame:0000000000000AFE                 db  0Eh
.eh_frame:0000000000000AFF                 db  10h
.eh_frame:0000000000000B00                 db  86h
.eh_frame:0000000000000B01                 db    2
.eh_frame:0000000000000B02                 db  43h ; C
.eh_frame:0000000000000B03                 db  0Dh
.eh_frame:0000000000000B04                 db    6
.eh_frame:0000000000000B05                 db    2
.eh_frame:0000000000000B06                 db  72h ; r
.eh_frame:0000000000000B07                 db  0Ch
.eh_frame:0000000000000B08                 db    7
.eh_frame:0000000000000B09                 db    8
.eh_frame:0000000000000B0A                 db    0
.eh_frame:0000000000000B0B                 db    0
.eh_frame:0000000000000B0C                 db    0
.eh_frame:0000000000000B0D                 db    0
.eh_frame:0000000000000B0E                 db    0
.eh_frame:0000000000000B0F                 db    0
.eh_frame:0000000000000B10                 db  44h ; D
.eh_frame:0000000000000B11                 db    0
.eh_frame:0000000000000B12                 db    0
.eh_frame:0000000000000B13                 db    0
.eh_frame:0000000000000B14                 db 0A4h
.eh_frame:0000000000000B15                 db    0
.eh_frame:0000000000000B16                 db    0
.eh_frame:0000000000000B17                 db    0
.eh_frame:0000000000000B18                 db  28h ; (
.eh_frame:0000000000000B19                 db 0FEh
.eh_frame:0000000000000B1A                 db 0FFh
.eh_frame:0000000000000B1B                 db 0FFh
.eh_frame:0000000000000B1C                 db  65h ; e
.eh_frame:0000000000000B1D                 db    0
.eh_frame:0000000000000B1E                 db    0
.eh_frame:0000000000000B1F                 db    0
.eh_frame:0000000000000B20                 db    0
.eh_frame:0000000000000B21                 db  42h ; B
.eh_frame:0000000000000B22                 db  0Eh
.eh_frame:0000000000000B23                 db  10h
.eh_frame:0000000000000B24                 db  8Fh
.eh_frame:0000000000000B25                 db    2
.eh_frame:0000000000000B26                 db  42h ; B
.eh_frame:0000000000000B27                 db  0Eh
.eh_frame:0000000000000B28                 db  18h
.eh_frame:0000000000000B29                 db  8Eh
.eh_frame:0000000000000B2A                 db    3
.eh_frame:0000000000000B2B                 db  45h ; E
.eh_frame:0000000000000B2C                 db  0Eh
.eh_frame:0000000000000B2D                 db  20h
.eh_frame:0000000000000B2E                 db  8Dh
.eh_frame:0000000000000B2F                 db    4
.eh_frame:0000000000000B30                 db  42h ; B
.eh_frame:0000000000000B31                 db  0Eh
.eh_frame:0000000000000B32                 db  28h ; (
.eh_frame:0000000000000B33                 db  8Ch
.eh_frame:0000000000000B34                 db    5
.eh_frame:0000000000000B35                 db  48h ; H
.eh_frame:0000000000000B36                 db  0Eh
.eh_frame:0000000000000B37                 db  30h ; 0
.eh_frame:0000000000000B38                 db  86h
.eh_frame:0000000000000B39                 db    6
.eh_frame:0000000000000B3A                 db  48h ; H
.eh_frame:0000000000000B3B                 db  0Eh
.eh_frame:0000000000000B3C                 db  38h ; 8
.eh_frame:0000000000000B3D                 db  83h
.eh_frame:0000000000000B3E                 db    7
.eh_frame:0000000000000B3F                 db  4Dh ; M
.eh_frame:0000000000000B40                 db  0Eh
.eh_frame:0000000000000B41                 db  40h ; @
.eh_frame:0000000000000B42                 db  72h ; r
.eh_frame:0000000000000B43                 db  0Eh
.eh_frame:0000000000000B44                 db  38h ; 8
.eh_frame:0000000000000B45                 db  41h ; A
.eh_frame:0000000000000B46                 db  0Eh
.eh_frame:0000000000000B47                 db  30h ; 0
.eh_frame:0000000000000B48                 db  41h ; A
.eh_frame:0000000000000B49                 db  0Eh
.eh_frame:0000000000000B4A                 db  28h ; (
.eh_frame:0000000000000B4B                 db  42h ; B
.eh_frame:0000000000000B4C                 db  0Eh
.eh_frame:0000000000000B4D                 db  20h
.eh_frame:0000000000000B4E                 db  42h ; B
.eh_frame:0000000000000B4F                 db  0Eh
.eh_frame:0000000000000B50                 db  18h
.eh_frame:0000000000000B51                 db  42h ; B
.eh_frame:0000000000000B52                 db  0Eh
.eh_frame:0000000000000B53                 db  10h
.eh_frame:0000000000000B54                 db  42h ; B
.eh_frame:0000000000000B55                 db  0Eh
.eh_frame:0000000000000B56                 db    8
.eh_frame:0000000000000B57                 db    0
.eh_frame:0000000000000B58                 db  10h
.eh_frame:0000000000000B59                 db    0
.eh_frame:0000000000000B5A                 db    0
.eh_frame:0000000000000B5B                 db    0
.eh_frame:0000000000000B5C                 db 0ECh
.eh_frame:0000000000000B5D                 db    0
.eh_frame:0000000000000B5E                 db    0
.eh_frame:0000000000000B5F                 db    0
.eh_frame:0000000000000B60                 db  50h ; P
.eh_frame:0000000000000B61                 db 0FEh
.eh_frame:0000000000000B62                 db 0FFh
.eh_frame:0000000000000B63                 db 0FFh
.eh_frame:0000000000000B64                 db    2
.eh_frame:0000000000000B65                 db    0
.eh_frame:0000000000000B66                 db    0
.eh_frame:0000000000000B67                 db    0
.eh_frame:0000000000000B68                 db    0
.eh_frame:0000000000000B69                 db    0
.eh_frame:0000000000000B6A                 db    0
.eh_frame:0000000000000B6B                 db    0
.eh_frame:0000000000000B6C __FRAME_END__   db    0
.eh_frame:0000000000000B6D                 db    0
.eh_frame:0000000000000B6E                 db    0
.eh_frame:0000000000000B6F                 db    0
.eh_frame:0000000000000B6F _eh_frame       ends
.eh_frame:0000000000000B6F
.init_array:0000000000200D90 ; ELF Initialization Function Table
.init_array:0000000000200D90 ; ===========================================================================
.init_array:0000000000200D90
.init_array:0000000000200D90 ; Segment type: Pure data
.init_array:0000000000200D90 ; Segment permissions: Read/Write
.init_array:0000000000200D90 _init_array     segment qword public 'DATA' use64
.init_array:0000000000200D90                 assume cs:_init_array
.init_array:0000000000200D90                 ;org 200D90h
.init_array:0000000000200D90 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000200D90                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000200D90                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000200D90 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000200D90
.fini_array:0000000000200D98 ; ELF Termination Function Table
.fini_array:0000000000200D98 ; ===========================================================================
.fini_array:0000000000200D98
.fini_array:0000000000200D98 ; Segment type: Pure data
.fini_array:0000000000200D98 ; Segment permissions: Read/Write
.fini_array:0000000000200D98 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000200D98                 assume cs:_fini_array
.fini_array:0000000000200D98                 ;org 200D98h
.fini_array:0000000000200D98 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000200D98                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000200D98 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000200D98
LOAD:0000000000200DA0 ; ELF Dynamic Information
LOAD:0000000000200DA0 ; ===========================================================================
LOAD:0000000000200DA0
LOAD:0000000000200DA0 ; Segment type: Pure data
LOAD:0000000000200DA0 ; Segment permissions: Read/Write
LOAD:0000000000200DA0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000200DA0                 assume cs:LOAD
LOAD:0000000000200DA0                 ;org 200DA0h
LOAD:0000000000200DA0 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000200DA0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000200DA0                                         ; DT_NEEDED libc.so.6
LOAD:0000000000200DB0                 Elf64_Dyn <0Ch, 650h>   ; DT_INIT
LOAD:0000000000200DC0                 Elf64_Dyn <0Dh, 9B4h>   ; DT_FINI
LOAD:0000000000200DD0                 Elf64_Dyn <19h, 200D90h> ; DT_INIT_ARRAY
LOAD:0000000000200DE0                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000200DF0                 Elf64_Dyn <1Ah, 200D98h> ; DT_FINI_ARRAY
LOAD:0000000000200E00                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000200E10                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000200E20                 Elf64_Dyn <5, 3D8h>     ; DT_STRTAB
LOAD:0000000000200E30                 Elf64_Dyn <6, 2B8h>     ; DT_SYMTAB
LOAD:0000000000200E40                 Elf64_Dyn <0Ah, 0C9h>   ; DT_STRSZ
LOAD:0000000000200E50                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000200E60                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000200E70                 Elf64_Dyn <3, 200F90h>  ; DT_PLTGOT
LOAD:0000000000200E80                 Elf64_Dyn <2, 90h>      ; DT_PLTRELSZ
LOAD:0000000000200E90                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000200EA0                 Elf64_Dyn <17h, 5C0h>   ; DT_JMPREL
LOAD:0000000000200EB0                 Elf64_Dyn <7, 500h>     ; DT_RELA
LOAD:0000000000200EC0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
LOAD:0000000000200ED0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000200EE0                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000200EF0                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000200F00                 Elf64_Dyn <6FFFFFFEh, 4C0h> ; DT_VERNEED
LOAD:0000000000200F10                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000200F20                 Elf64_Dyn <6FFFFFF0h, 4A2h> ; DT_VERSYM
LOAD:0000000000200F30                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
LOAD:0000000000200F40                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000200F50                 db    0
LOAD:0000000000200F51                 db    0
LOAD:0000000000200F52                 db    0
LOAD:0000000000200F53                 db    0
LOAD:0000000000200F54                 db    0
LOAD:0000000000200F55                 db    0
LOAD:0000000000200F56                 db    0
LOAD:0000000000200F57                 db    0
LOAD:0000000000200F58                 db    0
LOAD:0000000000200F59                 db    0
LOAD:0000000000200F5A                 db    0
LOAD:0000000000200F5B                 db    0
LOAD:0000000000200F5C                 db    0
LOAD:0000000000200F5D                 db    0
LOAD:0000000000200F5E                 db    0
LOAD:0000000000200F5F                 db    0
LOAD:0000000000200F60                 db    0
LOAD:0000000000200F61                 db    0
LOAD:0000000000200F62                 db    0
LOAD:0000000000200F63                 db    0
LOAD:0000000000200F64                 db    0
LOAD:0000000000200F65                 db    0
LOAD:0000000000200F66                 db    0
LOAD:0000000000200F67                 db    0
LOAD:0000000000200F68                 db    0
LOAD:0000000000200F69                 db    0
LOAD:0000000000200F6A                 db    0
LOAD:0000000000200F6B                 db    0
LOAD:0000000000200F6C                 db    0
LOAD:0000000000200F6D                 db    0
LOAD:0000000000200F6E                 db    0
LOAD:0000000000200F6F                 db    0
LOAD:0000000000200F70                 db    0
LOAD:0000000000200F71                 db    0
LOAD:0000000000200F72                 db    0
LOAD:0000000000200F73                 db    0
LOAD:0000000000200F74                 db    0
LOAD:0000000000200F75                 db    0
LOAD:0000000000200F76                 db    0
LOAD:0000000000200F77                 db    0
LOAD:0000000000200F78                 db    0
LOAD:0000000000200F79                 db    0
LOAD:0000000000200F7A                 db    0
LOAD:0000000000200F7B                 db    0
LOAD:0000000000200F7C                 db    0
LOAD:0000000000200F7D                 db    0
LOAD:0000000000200F7E                 db    0
LOAD:0000000000200F7F                 db    0
LOAD:0000000000200F80                 db    0
LOAD:0000000000200F81                 db    0
LOAD:0000000000200F82                 db    0
LOAD:0000000000200F83                 db    0
LOAD:0000000000200F84                 db    0
LOAD:0000000000200F85                 db    0
LOAD:0000000000200F86                 db    0
LOAD:0000000000200F87                 db    0
LOAD:0000000000200F88                 db    0
LOAD:0000000000200F89                 db    0
LOAD:0000000000200F8A                 db    0
LOAD:0000000000200F8B                 db    0
LOAD:0000000000200F8C                 db    0
LOAD:0000000000200F8D                 db    0
LOAD:0000000000200F8E                 db    0
LOAD:0000000000200F8F                 db    0
LOAD:0000000000200F8F LOAD            ends
LOAD:0000000000200F8F
.got:0000000000200F90 ; ===========================================================================
.got:0000000000200F90
.got:0000000000200F90 ; Segment type: Pure data
.got:0000000000200F90 ; Segment permissions: Read/Write
.got:0000000000200F90 _got            segment qword public 'DATA' use64
.got:0000000000200F90                 assume cs:_got
.got:0000000000200F90                 ;org 200F90h
.got:0000000000200F90 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000200F98 qword_200F98    dq 0                    ; DATA XREF: sub_670↑r
.got:0000000000200FA0 qword_200FA0    dq 0                    ; DATA XREF: sub_670+6↑r
.got:0000000000200FA8 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:0000000000200FB0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000200FB8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000200FB8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000200FC0 printf_ptr      dq offset printf        ; DATA XREF: _printf↑r
.got:0000000000200FC8 __isoc99_scanf_ptr dq offset __isoc99_scanf
.got:0000000000200FC8                                         ; DATA XREF: ___isoc99_scanf↑r
.got:0000000000200FD0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000200FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000200FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000200FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000200FE0                                         ; DATA XREF: _start+24↑r
.got:0000000000200FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000200FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000200FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000200FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000200FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000200FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000200FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000200FF8 _got            ends
.got:0000000000200FF8
.data:0000000000201000 ; ===========================================================================
.data:0000000000201000
.data:0000000000201000 ; Segment type: Pure data
.data:0000000000201000 ; Segment permissions: Read/Write
.data:0000000000201000 _data           segment qword public 'DATA' use64
.data:0000000000201000                 assume cs:_data
.data:0000000000201000                 ;org 201000h
.data:0000000000201000                 public __data_start ; weak
.data:0000000000201000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000201000                                         ; data_start
.data:0000000000201001                 db    0
.data:0000000000201002                 db    0
.data:0000000000201003                 db    0
.data:0000000000201004                 db    0
.data:0000000000201005                 db    0
.data:0000000000201006                 db    0
.data:0000000000201007                 db    0
.data:0000000000201008                 public __dso_handle
.data:0000000000201008 ; void *_dso_handle
.data:0000000000201008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000201008                                         ; .data:__dso_handle↓o
.data:0000000000201008 _data           ends
.data:0000000000201008
.bss:0000000000201010 ; ===========================================================================
.bss:0000000000201010
.bss:0000000000201010 ; Segment type: Uninitialized
.bss:0000000000201010 ; Segment permissions: Read/Write
.bss:0000000000201010 _bss            segment byte public 'BSS' use64
.bss:0000000000201010                 assume cs:_bss
.bss:0000000000201010                 ;org 201010h
.bss:0000000000201010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000201010                 public __bss_start
.bss:0000000000201010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
.bss:0000000000201010                                         ; deregister_tm_clones+8↑o ...
.bss:0000000000201010                                         ; Alternative name is '__TMC_END__'
.bss:0000000000201010                                         ; completed.7697
.bss:0000000000201010                                         ; _edata
.bss:0000000000201011                 align 8
.bss:0000000000201011 _bss            ends
.bss:0000000000201011
.prgend:0000000000201018 ; ===========================================================================
.prgend:0000000000201018
.prgend:0000000000201018 ; Segment type: Zero-length
.prgend:0000000000201018 _prgend         segment byte public '' use64
.prgend:0000000000201018 _end            label byte
.prgend:0000000000201018 _prgend         ends
.prgend:0000000000201018
extern:0000000000201020 ; ===========================================================================
extern:0000000000201020
extern:0000000000201020 ; Segment type: Externs
extern:0000000000201020 ; extern
extern:0000000000201020 ; int puts(const char *s)
extern:0000000000201020                 extrn puts:near         ; CODE XREF: _puts↑j
extern:0000000000201020                                         ; DATA XREF: .got:puts_ptr↑o
extern:0000000000201028 ; size_t strlen(const char *s)
extern:0000000000201028                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000201028                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000201030                 extrn __stack_chk_fail:near
extern:0000000000201030                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000201030                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000201038 ; int printf(const char *format, ...)
extern:0000000000201038                 extrn printf:near       ; CODE XREF: _printf↑j
extern:0000000000201038                                         ; DATA XREF: .got:printf_ptr↑o
extern:0000000000201040 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000201040                 extrn __libc_start_main:near
extern:0000000000201040                                         ; CODE XREF: _start+24↑p
extern:0000000000201040                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000201048                 extrn __isoc99_scanf:near
extern:0000000000201048                                         ; CODE XREF: ___isoc99_scanf↑j
extern:0000000000201048                                         ; DATA XREF: .got:__isoc99_scanf_ptr↑o
extern:0000000000201050 ; void __noreturn exit(int status)
extern:0000000000201050                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000201050                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000201058 ; int __cxa_finalize(void *)
extern:0000000000201058                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000201058                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000201058                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000201060                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000201060                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000201068                 extrn __gmon_start__:near ; weak
extern:0000000000201068                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000201068                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000201070                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000201070                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000201070
extern:0000000000201070
extern:0000000000201070                 end _start